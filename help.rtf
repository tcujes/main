{\rtf1\ansi\ansicpg1250\deff0\deflang1050{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset238{\*\fname Arial;}Arial CE;}}
{\colortbl ;\red0\green0\blue0;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sl240\slmult1\lang1033\b\fs24 1. Mathematical functions\b0\par
\par
\tab\b acos \lang1050\b0\f1\tab\lang1033\f0 - arccosine\tab\tab\b asin \lang1050\b0\f1\tab\lang1033\f0 - arcsine\tab\tab\lang1050\f1\tab\lang1033\b\f0 atan \lang1050\b0\f1\tab\lang1033\f0 - arctangent\par
\tab\b cos \lang1050\b0\f1\tab\lang1033\f0 - cosine\tab\tab\b cosh \lang1050\b0\f1\tab\lang1033\f0 - hyperbolic cosine\tab\lang1050\f1\tab\lang1033\b\f0 exp\lang1050\b0\f1\tab\lang1033\f0  - exponential (e**\lang1050\f1 n\lang1033\f0 )\par
\tab\b abs \lang1050\b0\f1\tab\lang1033\f0 - absolute value\tab\b ln \lang1050\b0\f1\tab\lang1033\f0 - natural logarithm\tab\lang1050\f1\tab\lang1033\b\f0 log \lang1050\b0\f1\tab\lang1033\f0 - logarithm base 10\par
\tab\b sin \lang1050\b0\f1\tab\lang1033\f0 - sine\tab\tab\tab\b sinh \lang1050\b0\f1\tab\lang1033\f0 - hyperbolic sine\tab\lang1050\f1\tab\lang1033\b\f0 sqrt \lang1050\b0\f1\tab\lang1033\f0 - square root\par
\tab\b tan \lang1050\b0\f1\tab\lang1033\f0 - tangent\tab\tab\b tanh \lang1050\b0\f1\tab\lang1033\f0 - hyperbolic tangent\tab\lang1050\f1\tab\lang1033\b\f0 round \b0 - rounded value\par
\tab\b tolng \lang1050\b0\f1\tab\lang1033\f0 - long integer value\tab\b todbl \lang1050\b0\f1\tab\lang1033\f0 - double value\tab\lang1050\f1\tab\lang1033\b\f0 toflt\lang1050\b0\f1\tab\lang1033\f0 - float value\par
\tab\b tostr \lang1050\b0\f1\tab\lang1033\f0 - string value\tab\tab\b inc\lang1050\b0\f1\tab\lang1033\f0  - increment value\tab\lang1050\f1\tab\lang1033\b\f0 dec \lang1050\b0\f1\tab\lang1033\f0 - decrement value\par
\par
\par
\b 2. Operators\b0\par
\par
\tab\b + \lang1050\b0\f1\tab\lang1033\f0 addition\tab\tab\tab\b - \lang1050\b0\f1\tab\lang1033\f0 subtraction\tab\tab\tab\b / \lang1050\b0\f1\tab\lang1033\f0 division\par
\tab\b * \lang1050\b0\f1\tab\lang1033\f0 multiplication\tab\tab\lang1050\f1\tab\lang1033\b\f0 ** \lang1050\b0\f1\tab\lang1033\f0 power\tab\tab\tab\tab\b < \lang1050\b0\f1\tab\lang1033\f0 less than\par
\tab\b > \lang1050\b0\f1\tab\lang1033\f0 greater than\tab\tab\tab\b <= \lang1050\b0\f1\tab\lang1033\f0 less than or equal to\tab\tab\b >= \lang1050\b0\f1\tab\lang1033\f0 greater than or equal to\par
\tab\b = \lang1050\b0\f1\tab\lang1033\f0 equal\tab\tab\tab\tab\b != \lang1050\b0\f1\tab\lang1033\f0 not equal\tab\tab\tab\b % \lang1050\b0\f1\tab\lang1033\f0 modulus\par
\tab\b - \lang1050\b0\f1\tab\lang1033\f0 unarni minus\tab\tab\tab\b ! \lang1050\b0\f1\tab\lang1033\f0 logical-NOT\tab\tab\tab\b ~ \lang1050\b0\f1\tab\lang1033\f0 one's complement\par
\tab\b ^ \lang1050\b0\f1\tab\lang1033\f0 bitwise-exclusive-OR\tab\b & \lang1050\b0\f1\tab\lang1033\f0 bitwise-AND\tab\tab\tab\b |\lang1050\b0\f1\tab\lang1033\f0  bitwise-inclusive-OR\par
\tab\b >> \lang1050\b0\f1\tab\lang1033\f0 right shift\tab\tab\tab\b << \lang1050\b0\f1\tab\lang1033\f0 left shift\tab\tab\tab\b && \lang1050\b0\f1\tab\lang1033\f0 logical-AND\par
\tab\b ||\lang1050\b0\f1\tab\lang1033\f0  logical-OR\par
\par
\par
\b 3. Variables and constants\b0\par
\par
\tab\lang1050\f1 The v\lang1033\f0 ariable name and \lang1050\f1 the \lang1033\f0 constant\lang1050\f1  \lang1033\f0 name is case sensitive. \par
\tab\lang1050\f1 The v\lang1033\f0 ariable name and \lang1050\f1 the \lang1033\f0 constant name must \lang1050\f1 not \lang1033\f0 start with \lang1050\f1 number or dot character\lang1033\f0  \par
\lang1050\f1\tab\lang1033\f0 and may contain letters,\lang1050\f1  \lang1033\f0 numbers and characters '.' and '_'\lang1050\f1  (dot and underline)\lang1033\f0 .\par
\par
\tab\lang1050\f1 The\lang1033\f0  value \lang1050\f1 of constant \lang1033\f0 cannot be changed after initialization!\par
\par
\tab Initialization of the variables is obligatory.\par
\par
\i\tab Example:\i0\par
\par
\tab\b\i integer.value = 45 \tab // => integer variable\par
\tab integer_hex = 0xff \tab // => integer variable\par
\tab float.value = 45. \tab // => floating point variable\par
\tab float_another = 5.23\tab // => floating point variable\par
\lang1050\f1\tab text = "this is a string"\lang1033\f0\par
\tab const pi = 3.14159\par
\par
\lang1050\b0\i0\f1\tab\lang1033\f0 Variable can be fixed size one dimensional array.\par
\lang1050\f1\tab\lang1033\f0 The array needs to be initialized at declaration.\lang1050\f1  \lang1033\f0 The data types in \lang1050\f1 the \lang1033\f0 array can be mixed.\par
\pard\sa200\sl276\slmult1\tab The one dimensional array can be treated easily as two dimensional array in matrix calculations.\lang1050\b\i\f1\par
\pard\sl240\slmult1\b0\tab\lang1033\f0 Example:\b\par
\par
\tab array Matrix =  \tab 0., 2., 1., -8., \lang1050\f1\tab\tab\tab\tab\lang1033\f0\tab //row 1\par
\tab\tab\tab\tab 1., -2., -3., 0.,\tab\lang1050\f1\tab\tab\tab\tab\lang1033\f0 //row 2\par
\tab\tab\tab\tab  -1., 1., 2., \lang1050\f1 "last element in 3th row"\lang1033\f0\tab //row 3\par
\par
\lang1050\f1\tab\lang1033\f0 cols = 4\lang1050\f1\tab // number of columns in matrix\lang1033\f0\par
\lang1050\f1\tab\lang1033\protect\f0 row = 2\tab //\lang1050\protect0\f1  \lang1033\protect\f0 row is counted from 0\protect0\par
\lang1050\f1\tab\lang1033\protect\f0 col = 3\lang1050\protect0\f1\tab\lang1033\protect\f0 //\lang1050\protect0\f1  \lang1033\protect\f0 col is counted from 0\lang1050\protect0\f1\par
\par
\tab\lang1033\protect\f0 print ( Matrix[ row * cols + col])\protect0\par
\b0\i0\par
\par
\b 4. Comments\b0\par
\par
\tab\lang1050\f1 A c\lang1033\f0 omment at the end of \lang1050\f1 a\lang1033\f0  line begins with '//'.\par
\tab\lang1050\f1 A mu\lang1033\f0 lti Line comment begins with '/*' and ends with '*/'.\par
\par
\i\tab Example:\i0\par
\par
\b\i\tab integer.value = 255 \tab // => integer variable\par
\par
\tab /* another way to initialization integer\par
\tab integer.value = 0xff // =>hexa\par
\tab integer.value = 0377 // =>octal\par
\tab */\b0\i0\par
\par
\b 5. Printing an output from \lang1050\f1 the\lang1033\f0  program to the text box at the right side\b0\par
\par
\tab\lang1050\f1 For\lang1033\f0  print\lang1050\f1 ing an output from the program \lang1033\f0 use \lang1050\f1 the\lang1033\f0  function print( n) or println( n)\lang1050\f1 ,\lang1033\f0  \par
\lang1050\f1\tab\lang1033\f0 where n is \lang1050\f1 an \lang1033\f0 expression.\lang1050\f1  The f\lang1033\f0 unction println( n) adds \lang1050\f1 a \lang1033\f0 new line at the end.\par
\par
\tab\i Example:\par
\i0\par
\tab\b\i first_var = 1\par
\tab second_var = 2\par
\par
\tab print( " The value of first variable is " + first_var + \par
\tab\tab "\\n and second variable is " + second_var + "\\n\\n That's all! :)")\par
\par
\tab println( "")\par
\tab println( "")\par
\tab print( " Very easy!")\par
\b0\i0\par
\par
\b 6. Expressions\b0\par
\par
\tab\lang1050\f1 Syntax correctly sequence of the variables, functions, numeric or string constants, \par
\tab operators and round brackets.\lang1033\f0\par
\tab\par
\tab\i Example:\i0\par
\par
\tab\b\i pi = 3.14159\par
\tab r = 10.5\par
\tab p = pi*r**2 \lang1050\f1\tab\lang1033\f0 // pi*r**2 is axpression\par
\par
\tab println( "p=" + p)\par
\par
\tab p = pi*(r**2)\par
\par
\tab println( "is same as " + p)\par
\b0\i0\par
\par
\b 7. Keywords\b0\par
\par
\tab\b break\b0\tab\tab\tab\lang1050\f1\tab\lang1033\f0 breaking DO or WHILE loop\par
\tab\b continue\b0\tab\tab\lang1050\f1\tab\lang1033\f0 going to\lang1050\f1  the \lang1033\f0 first \lang1050\f1 s\lang1033\f0 tatements in DO or WHILE loop\par
\tab\b return\lang1050\f1  \lang1033\f0  \b0 [expression]\lang1050\b\f1  \tab\lang1033\b0\f0\tab breaking the function/program and return the value\par
\par
\i Example:\lang1050\f1\tab See the example below in WHILE loop chapter.\par
\par
\lang1033\i0\f0\par
\b 8. IF branch\b0\par
\par
\tab\b if \b0 [expression] \par
\lang1050\f1\tab\b\{\lang1033\b0\f0\par
\tab\tab [statements] \par
\lang1050\b\f1\tab\}\lang1033\b0\f0\par
\tab\b else\lang1050\f1  \lang1033\f0 if \b0 [expression] \par
\lang1050\f1\tab\b\{\lang1033\f0  \b0\par
\tab\tab [statements] \par
\lang1050\b\f1\tab\}\lang1033\b0\f0\par
\tab\b else\b0\par
\tab\tab [statements] \par
\tab\lang1050\b\f1\}\lang1033\b0\f0\par
\par
\i Example:\lang1050\f1\tab See the example below in WHILE loop chapter.\par
\lang1033\i0\f0\par
\par
\b 9. DO-\lang1050\f1 WHILE\lang1033\f0  loop\b0\par
\par
\tab\b do\par
\lang1050\f1\tab\{\lang1033\b0\f0\par
\tab\tab [statements] \par
\tab\lang1050\b\f1\} \lang1033\f0 while\lang1050\f1  \lang1033\b0\f0 [expression]\par
\par
\i Example:\lang1050\f1\tab See the example below in WHILE loop chapter.\par
\lang1033\i0\f0\par
\par
\b 10. WHILE loop\b0\par
\par
\tab\b while \b0 [expression]\lang1050\f1  \par
\b\tab\{\lang1033\b0\f0\par
\tab\tab [statements]\par
\tab\lang1050\b\f1\}\lang1033\f0\par
\par
\lang1050\f1\tab\lang1033\b0\i\f0 Example:\par
\cf1\i0\par
\lang1050\b\i\f1\tab println( "prime= " + 1 )\par
\tab println( "prime= " + 3 )\par
\par
\tab prime = 2\par
\par
\tab do \{\par
\tab\tab prime = prime + 1\par
\par
\tab\tab if prime >= 10000 return 0\par
\par
\tab\tab test = 2\par
\par
\tab\tab while test * test <= prime \{\par
\par
\tab\tab\tab if prime % test == 0 break \par
\par
\tab\tab\tab if test + 1  > sqrt( prime) println( "prime= " + prime ) \par
\par
\tab\tab\tab test = test + 1\par
\tab\tab\}\par
\par
\tab\} while true\cf0\lang1033\b0\i0\f0\par
\par
\par
\b 11. \lang1050\f1 Go to label\lang1033\b0\f0\par
\par
\tab\b label(\b0  [numeric constant]\b  )\par
\b0\tab\b goto(\b0  [numeric constant]\b  )\b0\par
\par
\tab\i Example:\par
\i0\par
\tab\b\i counter = 1\par
\par
\tab label( 0)\par
\par
\tab print\lang1050\f1 ln\lang1033\f0 ( counter)\par
\tab counter = counter + 1\par
\par
\tab if counter <= 10 goto( 0) \par
\par
\i0\par
12. Function\b0\par
\par
\tab\b function \b0 [function name]\lang1050\f1  \lang1033\b\f0 (\b0  param1, param\lang1050\f1 2,\lang1033\f0  ...\b ) \{\b0  [statements] \b\}\b0\par
\par
\tab Example:\par
\par
\tab\b\i function fibonacci( n)\par
\lang1050\f1\tab\lang1033\f0\{   \par
\tab  \lang1050\f1\tab\lang1033\f0 if n == 0\lang1050\f1\tab\tab\lang1033\f0 return 0 \par
\tab  \lang1050\f1\tab\lang1033\f0 else if n == 1\tab\lang1050\f1\tab\lang1033\f0 return 1\par
\tab  \lang1050\f1\tab\lang1033\f0 else\lang1050\f1\tab\tab\tab\lang1033\f0 return fibonacci(n-1) + fibonacci(n-2)\par
\lang1050\f1\tab\lang1033\f0\}\par
\par
\lang1050\f1\tab\lang1033\f0 n = \lang1050\f1 2\lang1033\f0 0\par
\lang1050\f1\tab\lang1033\f0 i = 0\par
 \par
\lang1050\f1\tab\lang1033\f0 while i < n  \par
\lang1050\f1\tab\lang1033\f0\{\par
\tab\lang1050\f1\tab\lang1033\f0 println( fibonacci(i))\par
\tab\lang1050\f1\tab\lang1033\f0 i = inc ( i)\par
\lang1050\f1\tab\lang1033\f0\}\par
}
 